import { TypedEmitter } from '@trezor/utils';
import { Transport, TRANSPORT, Descriptor } from '@trezor/transport';
import { DEVICE, TransportInfo } from '../events';
import { Device } from './Device';
import type { ConnectSettings, Device as DeviceTyped } from '../types';
interface DeviceListEvents {
    [TRANSPORT.START]: TransportInfo;
    [TRANSPORT.ERROR]: string;
    [DEVICE.CONNECT]: DeviceTyped;
    [DEVICE.CONNECT_UNACQUIRED]: DeviceTyped;
    [DEVICE.DISCONNECT]: DeviceTyped;
    [DEVICE.CHANGED]: DeviceTyped;
    [DEVICE.RELEASED]: DeviceTyped;
    [DEVICE.ACQUIRED]: DeviceTyped;
}
export declare class DeviceList extends TypedEmitter<DeviceListEvents> {
    transport: Transport;
    transports: Transport[];
    devices: {
        [path: string]: Device;
    };
    creatingDevicesDescriptors: {
        [k: string]: Descriptor;
    };
    transportStartPending: number;
    penalizedDevices: {
        [deviceID: string]: number;
    };
    transportFirstEventPromise: Promise<void> | undefined;
    private settings;
    constructor({ settings, messages, }: {
        settings: ConnectSettings;
        messages: Record<string, any>;
    });
    init(): Promise<void>;
    private resolveTransportEvent;
    waitForTransportFirstEvent(): Promise<void>;
    private _createAndSaveDevice;
    private _createUnacquiredDevice;
    private _createUnreadableDevice;
    getDevice(path: string): Device;
    getFirstDevicePath(): string;
    asArray(): DeviceTyped[];
    allDevices(): Device[];
    length(): number;
    transportType(): "BridgeTransport" | "NodeUsbTransport" | "WebUsbTransport" | "UdpTransport";
    getTransportInfo(): TransportInfo;
    dispose(): void;
    disconnectDevices(): void;
    enumerate(): Promise<void>;
    addAuthPenalty(device: Device): void;
    private getAuthPenalty;
    removeAuthPenalty(device: Device): void;
    private handle;
    private _takeAndCreateDevice;
    private _handleUsedElsewhere;
}
export {};
//# sourceMappingURL=DeviceList.d.ts.map