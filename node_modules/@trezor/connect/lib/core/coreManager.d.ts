/// <reference types="node" />
import { EventEmitter } from 'events';
import { CoreEventMessage } from '../events';
import { ConnectSettings } from '../types';
type CoreInstance = EventEmitter & {
    init: (settings: ConnectSettings, onCoreEvent: (message: CoreEventMessage) => void, ...rest: any[]) => Promise<void>;
    dispose: () => any;
};
export declare const initCoreManager: <Core extends CoreInstance>(core: Core) => {
    getOrInitCore: (...[settings, onCoreEvent, ...rest]: Parameters<Core["init"]>) => Promise<Core>;
    getCore: () => Core | undefined;
    getInitPromise: () => Promise<Core> | undefined;
    dispose: () => void;
};
export {};
//# sourceMappingURL=coreManager.d.ts.map