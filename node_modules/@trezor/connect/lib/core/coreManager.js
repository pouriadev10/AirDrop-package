"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCoreManager = void 0;
const utils_1 = require("@trezor/utils");
const events_1 = require("../events");
const initCoreManager = (core) => {
    const state = {};
    let initDfd;
    const getOrInitCore = (...[settings, onCoreEvent, ...rest]) => {
        if (state.core)
            return Promise.resolve(state.core);
        if (state.initPromise)
            return state.initPromise;
        const eventThrottle = async (...args) => {
            if (state.initPromise) {
                const core = await state.initPromise.catch(() => { });
                if (!core)
                    return;
            }
            onCoreEvent(...args);
        };
        const dfd = (0, utils_1.createDeferred)();
        initDfd = dfd;
        state.initPromise = dfd.promise;
        core.init(settings, eventThrottle, ...rest)
            .then(() => {
            core.on(events_1.CORE_EVENT, onCoreEvent);
            core.off(events_1.CORE_EVENT, eventThrottle);
            state.core = core;
            dfd.resolve(core);
        })
            .catch(dfd.reject)
            .finally(() => {
            initDfd = undefined;
            delete state.initPromise;
        });
        return dfd.promise;
    };
    const dispose = () => {
        var _a;
        initDfd === null || initDfd === void 0 ? void 0 : initDfd.reject(new Error('Core disposed'));
        initDfd = undefined;
        (_a = state.core) === null || _a === void 0 ? void 0 : _a.dispose();
        delete state.initPromise;
        delete state.core;
    };
    return {
        getOrInitCore,
        getCore: () => state.core,
        getInitPromise: () => state.initPromise,
        dispose,
    };
};
exports.initCoreManager = initCoreManager;
//# sourceMappingURL=coreManager.js.map