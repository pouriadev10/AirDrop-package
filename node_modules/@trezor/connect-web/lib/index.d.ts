/// <reference types="node" />
import { ConnectFactoryDependencies } from '@trezor/connect/lib/factory';
import type { ConnectSettings, Manifest } from '@trezor/connect/lib/types';
import EventEmitter from 'events';
import { CallMethodPayload } from '@trezor/connect';
export declare class TrezorConnectDynamicImpl implements ConnectFactoryDependencies {
    eventEmitter: EventEmitter;
    private currentTarget;
    private coreInIframeImpl;
    private coreInPopupImpl;
    constructor();
    private getTarget;
    manifest(data: Manifest): void;
    init(settings?: Partial<ConnectSettings>): Promise<void>;
    call(params: CallMethodPayload): Promise<any>;
    requestLogin(params: any): import("@trezor/connect").Response<import("@trezor/connect/lib/types/api/requestLogin").Login> | Promise<import("@trezor/connect").Unsuccessful | {
        id: number;
        success: boolean;
        payload: any;
    }>;
    uiResponse(params: any): void;
    renderWebUSBButton(): void;
    disableWebUSB(): void;
    requestWebUSBDevice(): void | Promise<void>;
    cancel(error?: string): void;
    dispose(): Promise<undefined>;
}
declare const TrezorConnect: import("@trezor/connect").TrezorConnect;
export default TrezorConnect;
export * from '@trezor/connect/lib/exports';
//# sourceMappingURL=index.d.ts.map