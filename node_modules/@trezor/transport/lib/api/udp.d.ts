/// <reference types="node" />
/// <reference types="node" />
import UDP from 'dgram';
import { AbstractApi, AbstractApiConstructorParams, DEVICE_TYPE } from './abstract';
import { AsyncResultWithTypedError, ResultWithTypedError } from '../types';
import * as ERRORS from '../errors';
export declare class UdpApi extends AbstractApi {
    chunkSize: number;
    protected interface: UDP.Socket;
    protected communicating: boolean;
    constructor({ logger }: AbstractApiConstructorParams);
    write(path: string, buffer: Buffer): Promise<ResultWithTypedError<undefined, "A transfer error has occurred." | "unexpected error">>;
    read(_path: string): AsyncResultWithTypedError<ArrayBuffer, typeof ERRORS.DEVICE_NOT_FOUND | typeof ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE | typeof ERRORS.INTERFACE_DATA_TRANSFER | typeof ERRORS.DEVICE_DISCONNECTED_DURING_ACTION | typeof ERRORS.UNEXPECTED_ERROR | typeof ERRORS.ABORTED_BY_TIMEOUT>;
    private ping;
    enumerate(): Promise<import("../types").Success<{
        path: string;
        type: DEVICE_TYPE;
    }[]>>;
    openDevice(_path: string, _first: boolean): Promise<import("../types").Success<undefined>>;
    closeDevice(_path: string): Promise<import("../types").Success<undefined>>;
    dispose(): void;
}
//# sourceMappingURL=udp.d.ts.map