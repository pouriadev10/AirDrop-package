"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsbApi = void 0;
const tslib_1 = require("tslib");
const abstract_1 = require("./abstract");
const constants_1 = require("../constants");
const utils_1 = require("@trezor/utils");
const ERRORS = tslib_1.__importStar(require("../errors"));
const INTERFACE_DEVICE_DISCONNECTED = 'The device was disconnected.';
class UsbApi extends abstract_1.AbstractApi {
    constructor({ usbInterface, logger }) {
        super({ logger });
        this.chunkSize = 64;
        this.devices = [];
        this.usbInterface = usbInterface;
        if (!this.usbInterface) {
            return;
        }
        this.usbInterface.onconnect = event => {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: onconnect: ${this.formatDeviceForLog(event.device)}`);
            const [_hidDevices, nonHidDevices] = this.filterDevices([event.device]);
            this.devices = [...this.devices, ...this.createDevices(nonHidDevices)];
            this.emit('transport-interface-change', this.devicesToDescriptors());
        };
        this.usbInterface.ondisconnect = event => {
            var _a, _b;
            const { device } = event;
            if (!device.serialNumber) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: ondisconnect: device without serial number:, ${device.productName}, ${device.manufacturerName}`);
                return;
            }
            const index = this.devices.findIndex(d => d.path === device.serialNumber);
            if (index > -1) {
                this.devices.splice(index, 1);
                this.emit('transport-interface-change', this.devicesToDescriptors());
            }
            else {
                this.emit('transport-interface-error', ERRORS.DEVICE_NOT_FOUND);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error('usb: device that should be removed does not exist in state');
            }
        };
    }
    formatDeviceForLog(device) {
        return JSON.stringify({
            productName: device.productName,
            manufacturerName: device.manufacturerName,
            serialNumber: device.serialNumber,
            vendorId: device.vendorId,
            productId: device.productId,
            deviceVersionMajor: device.deviceVersionMajor,
            deviceVersionMinor: device.deviceVersionMinor,
        });
    }
    matchDeviceType(device) {
        const isBootloader = device.productId === constants_1.WEBUSB_BOOTLOADER_PRODUCT;
        if (device.deviceVersionMajor === 2) {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT2Boot;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT2;
            }
        }
        else {
            if (isBootloader) {
                return abstract_1.DEVICE_TYPE.TypeT1WebusbBoot;
            }
            else {
                return abstract_1.DEVICE_TYPE.TypeT1Webusb;
            }
        }
    }
    devicesToDescriptors() {
        return this.devices.map(d => ({
            path: d.path,
            type: this.matchDeviceType(d.device),
            product: d.device.productId,
        }));
    }
    enumerate() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: enumerate');
                const devices = yield this.usbInterface.getDevices();
                const [hidDevices, nonHidDevices] = this.filterDevices(devices);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: enumerate done. connected devices.length: ${devices.length}. trezor old (hid) devices: ${hidDevices.length}. trezor devices: ${nonHidDevices.length}`);
                hidDevices.forEach(d => {
                    var _a;
                    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`usb: unreadable hid device connected. device: ${this.formatDeviceForLog(d)}`);
                });
                this.devices = this.createDevices(nonHidDevices);
                return this.success(this.devicesToDescriptors());
            }
            catch (err) {
                return this.unknownError(err, []);
            }
        });
    }
    read(path) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: device.transferIn');
                const res = yield device.transferIn(constants_1.ENDPOINT_ID, 64);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.transferIn done. status: ${res.status}, byteLength: ${(_c = res.data) === null || _c === void 0 ? void 0 : _c.byteLength}`);
                if (!res.data) {
                    return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER });
                }
                return this.success(res.data.buffer);
            }
            catch (err) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(`usb: device.transferIn error ${err}`);
                if (err.message === INTERFACE_DEVICE_DISCONNECTED) {
                    return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
                }
                return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER, message: err.message });
            }
        });
    }
    write(path, buffer) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            const newArray = new Uint8Array(64);
            newArray.set(new Uint8Array(buffer));
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('usb: device.transferOut');
                const result = yield device.transferOut(constants_1.ENDPOINT_ID, newArray);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug('usb: device.transferOut done');
                if (result.status !== 'ok') {
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`usb: device.transferOut status not ok: ${result.status}`);
                    throw new Error('transfer out status not ok');
                }
                return this.success(undefined);
            }
            catch (err) {
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(`usb: device.transferOut error ${err}`);
                if (err.message === INTERFACE_DEVICE_DISCONNECTED) {
                    return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
                }
                return this.error({ error: ERRORS.INTERFACE_DATA_TRANSFER, message: err.message });
            }
        });
    }
    openDevice(path, first) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < 5; i++) {
                const res = yield this.openInternal(path, first);
                if (res.success) {
                    return res;
                }
                yield (0, utils_1.createTimeoutPromise)(100 * i);
            }
            return this.openInternal(path, first);
        });
    }
    openInternal(path, first) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: device.open`);
                yield device.open();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.open done`);
            }
            catch (err) {
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(`usb: device.open error ${err}`);
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            if (first) {
                try {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.debug(`usb: device.selectConfiguration ${constants_1.CONFIGURATION_ID}`);
                    yield device.selectConfiguration(constants_1.CONFIGURATION_ID);
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.debug(`usb: device.selectConfiguration done: ${constants_1.CONFIGURATION_ID}`);
                }
                catch (err) {
                    (_f = this.logger) === null || _f === void 0 ? void 0 : _f.error(`usb: device.selectConfiguration error ${err}. device: ${this.formatDeviceForLog(device)}`);
                }
                try {
                    (_g = this.logger) === null || _g === void 0 ? void 0 : _g.debug('usb: device.reset');
                    yield device.reset();
                    (_h = this.logger) === null || _h === void 0 ? void 0 : _h.debug('usb: device.reset done');
                }
                catch (err) {
                    (_j = this.logger) === null || _j === void 0 ? void 0 : _j.error(`usb: device.reset error ${err}. device: ${this.formatDeviceForLog(device)}`);
                }
            }
            try {
                (_k = this.logger) === null || _k === void 0 ? void 0 : _k.debug(`usb: device.claimInterface: ${constants_1.INTERFACE_ID}`);
                yield device.claimInterface(constants_1.INTERFACE_ID);
                (_l = this.logger) === null || _l === void 0 ? void 0 : _l.debug(`usb: device.claimInterface done: ${constants_1.INTERFACE_ID}`);
            }
            catch (err) {
                (_m = this.logger) === null || _m === void 0 ? void 0 : _m.error(`usb: device.claimInterface error ${err}. device: ${this.formatDeviceForLog(device)}`);
                return this.error({
                    error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    message: err.message,
                });
            }
            return this.success(undefined);
        });
    }
    closeDevice(path) {
        var _a, _b, _c, _d, _e, _f, _g;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const device = this.findDevice(path);
            if (!device) {
                return this.error({ error: ERRORS.DEVICE_NOT_FOUND });
            }
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(`usb: closeDevice. device.opened: ${device.opened}`);
            if (device.opened) {
                try {
                    const interfaceId = constants_1.INTERFACE_ID;
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.debug(`usb: device.releaseInterface: ${interfaceId}`);
                    yield device.releaseInterface(interfaceId);
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.debug(`usb: device.releaseInterface done: ${interfaceId}`);
                }
                catch (err) {
                    (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(`usb: releaseInterface error ${err}. device: ${this.formatDeviceForLog(device)}`);
                }
            }
            if (device.opened) {
                try {
                    (_e = this.logger) === null || _e === void 0 ? void 0 : _e.debug(`usb: device.close`);
                    yield device.close();
                    (_f = this.logger) === null || _f === void 0 ? void 0 : _f.debug(`usb: device.close done`);
                }
                catch (err) {
                    (_g = this.logger) === null || _g === void 0 ? void 0 : _g.debug(`usb: device.close error ${err}. device: ${this.formatDeviceForLog(device)}`);
                    return this.error({
                        error: ERRORS.INTERFACE_UNABLE_TO_CLOSE_DEVICE,
                        message: err.message,
                    });
                }
            }
            return this.success(undefined);
        });
    }
    findDevice(path) {
        const device = this.devices.find(d => d.path === path);
        if (!device) {
            return;
        }
        return device.device;
    }
    createDevices(nonHidDevices) {
        let bootloaderId = 0;
        return nonHidDevices.map(device => {
            const { serialNumber } = device;
            let path = serialNumber == null || serialNumber === '' ? 'bootloader' : serialNumber;
            if (path === 'bootloader') {
                bootloaderId++;
                path += bootloaderId;
            }
            return { path, device };
        });
    }
    deviceIsHid(device) {
        return device.vendorId === constants_1.T1_HID_VENDOR;
    }
    filterDevices(devices) {
        const trezorDevices = devices.filter(dev => {
            const isTrezor = constants_1.TREZOR_USB_DESCRIPTORS.some(desc => dev.vendorId === desc.vendorId && dev.productId === desc.productId);
            return isTrezor;
        });
        const hidDevices = trezorDevices.filter(dev => this.deviceIsHid(dev));
        const nonHidDevices = trezorDevices.filter(dev => !this.deviceIsHid(dev));
        return [hidDevices, nonHidDevices];
    }
    dispose() {
        if (this.usbInterface) {
            this.usbInterface.onconnect = null;
            this.usbInterface.ondisconnect = null;
        }
    }
}
exports.UsbApi = UsbApi;
//# sourceMappingURL=usb.js.map